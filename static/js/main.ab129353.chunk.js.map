{"version":3,"sources":["utils/styles.js","Components/Fullscreen.js","Components/Lines.js","data/index.js","Components/FixedSection.js","utils/palette.js","Components/Button.js","Components/Menu.js","Components/Icon.js","serviceWorker.js","index.js","App.js"],"names":["size","FullscreenWrapper","styled","div","InnerFullScreen","FullScreen","children","SVGLine","line","props","height","Lines","data","onLineClick","getColor","isClient","window","getSize","width","innerWidth","undefined","innerHeight","useState","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","svgWidth","length","svgHeight","viewBox","xmlns","map","value","i","key","String","x1","x2","y1","y2","stroke","strokeWidth","onClick","LinearData","title","defaultColors","description","Array","fill","_","RandomData","Math","floor","random","CO2emissionData","source","GlobalTemperatureData","Header","h1","color","SubHeader","h2","Description","p","SourceLink","a","Footer","small","FixedSection","section","interpolators","interpolateBlues","d3","interpolateBrBG","interpolateBuGn","interpolateBuPu","interpolateCividis","interpolateCool","interpolateCubehelixDefault","interpolateGnBu","interpolateGreens","interpolateGreys","interpolateInferno","interpolateMagma","interpolateOrRd","interpolateOranges","interpolatePRGn","interpolatePiYG","interpolatePlasma","interpolatePuBu","interpolatePuBuGn","interpolatePuOr","interpolatePuRd","interpolatePurples","interpolateRainbow","interpolateRdBu","interpolateRdGy","interpolateRdPu","interpolateRdYlBu","interpolateRdYlGn","interpolateReds","interpolateSinebow","interpolateSpectral","interpolateTurbo","interpolateViridis","interpolateWarm","interpolateYlGn","interpolateYlGnBu","interpolateYlOrBr","interpolateYlOrRd","getInterPolator","name","names","Object","keys","includes","func","getRandomInterPolator","getColorInterpolator","interpolatorName","interPolator","themeColor","Button","button","ButtonLink","ButtonLabel","span","ButtonIcon","OuterWrapper","aside","Menu","InlineSVG","svg","attrs","SVGCircle","circle","cx","cy","r","Spinner","Boolean","location","hostname","match","ReactDOM","render","dataSources","dataSourceIndex","setDataSourceIndex","dataSource","selectedValue","setSelectedValue","interpolator","setInterpolator","normalize","maxValue","max","minValue","min","getNormalizer","href","alt","src","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAEaA,EAEL,qB,kQCCR,IAAMC,EAAoBC,IAAOC,IAAV,KAOjBC,EAAkBF,IAAOC,IAAV,KAKRE,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACxB,kBAACL,EAAD,KACE,kBAACG,EAAD,KAAkBE,K,qXCdtB,IAAMC,EAAUL,IAAOM,KAAV,KAIS,SAAAC,GAAK,OAAIA,EAAMC,UACd,SAAAD,GAAK,MAAmB,GAAfA,EAAMC,UAWzBC,EAAQ,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAAe,EFd7B,WAC3B,IAAMC,EAA6B,kBAAXC,OAExB,SAASC,IACP,MAAO,CACLC,MAAOH,EAAWC,OAAOG,gBAAaC,EACtCV,OAAQK,EAAWC,OAAOK,iBAAcD,GANX,MAUGE,mBAASL,GAVZ,mBAU1BM,EAV0B,KAUdC,EAVc,KAyBjC,OAbAC,qBAAU,WACR,IAAKV,EACH,OAAO,EAGT,SAASW,IACPF,EAAcP,KAIhB,OADAD,OAAOW,iBAAiB,SAAUD,GAC3B,kBAAMV,OAAOY,oBAAoB,SAAUF,MACjD,IAEIH,EEVmBM,GAAlBX,EADgD,EAChDA,MAAOR,EADyC,EACzCA,OAEToB,EAAmB,EADXlB,EAAKmB,OAEbC,EAAYF,GAAYpB,EAASQ,GAEvC,OACE,yBACEe,QAAO,cAASH,EAAT,YAAqBE,GAC5Bd,MAAM,OACNR,OAAO,OACPwB,MAAM,8BAELtB,EAAKuB,KAAI,SAACC,EAAOC,GAAR,OACR,kBAAC9B,EAAD,CACEG,OAAQsB,EACRM,IAAKC,OAAOH,GAAOG,OAAOF,GAC1BG,GAAI,EAAIH,EAAI,EACZI,GAAI,EAAIJ,EAAI,EACZK,GAAI,EACJC,GAAIX,EACJY,OAAQ9B,EAASsB,GACjBS,YAAY,IACZC,QAAS,mBAAQjC,GAAeA,EAAYuB,WC5CzCW,EAAa,CACxBC,MAAO,cACPC,cAAe,mBACfC,YAAa,qCACbtC,KAAMuC,MAAM,IACTC,KAAK,MACLjB,KAAI,SAACkB,EAAGhB,GAAJ,OAAUA,MAGNiB,EAAa,CACxBN,MAAO,cACPC,cAAe,mBACfC,YAAa,8BACbtC,KAAMuC,MAAM,IACTC,KAAK,MACLjB,KAAI,kBAAMoB,KAAKC,MAAsB,IAAhBD,KAAKE,cAGlBC,EAAkB,CAC7BV,MAAO,uBACPC,cAAe,mBACfC,YACE,mIAEFS,OAAQ,2DACR/C,KAAM,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,OAISgD,EAAwB,CACnCZ,MAAO,6BACPC,cAAe,mBACfC,YACE,oHAEFS,OAAQ,iCACR/C,KAAM,EACH,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACD,KACC,KACA,KACA,IACD,KACC,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,IACD,IACA,KACC,KACA,KACA,KACA,IACD,KACC,IACD,IACA,IACA,IACA,KACC,IACA,IACD,KACC,KACA,KACA,IACD,KACC,KACA,GACD,IACA,IACA,KACC,KACA,IACA,KACA,IACD,IACA,IACC,IACD,KACC,IACD,KACC,KACA,IACD,KACC,KACA,IACD,IACA,IACC,KACA,IACD,IACA,IACA,KACC,IACD,KACC,IACD,GACA,IACA,IACA,GACA,IACA,KACC,IACD,IACA,IACA,IACA,IACA,IACA,KACC,GACD,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA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","file":"static/js/main.ab129353.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const size = {\n  medium: `(min-width: 480px)`,\n  large: `(min-width: 768px)`,\n};\n\nexport const useWindowSize = () => {\n  const isClient = typeof window === 'object';\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { size } from '../utils/styles';\n\nconst FullscreenWrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  overflow: hidden;\n  display: flex;\n`;\n\nconst InnerFullScreen = styled.div`\n  vertical-align: middle;\n  width: 100%;\n`;\n\nexport const FullScreen = ({ children }) => (\n  <FullscreenWrapper>\n    <InnerFullScreen>{children}</InnerFullScreen>\n  </FullscreenWrapper>\n);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { useWindowSize } from \"../utils/styles\";\n\nconst SVGLine = styled.line`\n  transition: stroke-dashoffset 5s;\n  transition-timing-function: ease-in-out;\n  cursor: pointer;\n  stroke-dasharray: ${props => props.height};\n  stroke-dashoffset: ${props => props.height * 0.6};\n\n  &:hover {\n    stroke-dashoffset: 0;\n    transition-duration: 0.5s;\n  }\n\n  user-select: none;\n  -webkit-tap-highlight-color: transparent;\n`;\n\nexport const Lines = ({ data, onLineClick, getColor }) => {\n  const { width, height } = useWindowSize();\n  const count = data.length;\n  const svgWidth = count * 2;\n  const svgHeight = svgWidth * (height / width);\n\n  return (\n    <svg\n      viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n      width=\"100%\"\n      height=\"100%\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      {data.map((value, i) => (\n        <SVGLine\n          height={svgHeight}\n          key={String(value)+String(i)}\n          x1={2 * i + 1}\n          x2={2 * i + 1}\n          y1={0}\n          y2={svgHeight}\n          stroke={getColor(value)}\n          strokeWidth=\"2\"\n          onClick={() => !!onLineClick && onLineClick(value)}\n        />\n      ))}\n    </svg>\n  );\n};\n","export const LinearData = {\n  title: \"Linear data\",\n  defaultColors: \"interpolateTurbo\",\n  description: \"Data contains values 0, 1, 2...39.\",\n  data: Array(40)\n    .fill(null)\n    .map((_, i) => i)\n};\n\nexport const RandomData = {\n  title: \"Random data\",\n  defaultColors: \"interpolateTurbo\",\n  description: \"Data is randomly generated.\",\n  data: Array(40)\n    .fill(null)\n    .map(() => Math.floor(Math.random() * 100))\n};\n\nexport const CO2emissionData = {\n  title: \"Carbon emission data\",\n  defaultColors: \"interpolateTurbo\",\n  description:\n    \"Global Carbon Emissions from Fossil-Fuel Burning, \" +\n    \"Cement Manufacture, and Gas Flaring: 1945-2013. Values in million metric tons.\",\n  source: \"https://cdiac.ess-dive.lbl.gov/trends/emis/overview.html\",\n  data: [\n    1160,\n    1238,\n    1392,\n    1469,\n    1419,\n    1630,\n    1767,\n    1795,\n    1841,\n    1865,\n    2042,\n    2177,\n    2270,\n    2330,\n    2454,\n    2569,\n    2580,\n    2686,\n    2833,\n    2995,\n    3130,\n    3288,\n    3393,\n    3566,\n    3780,\n    4053,\n    4208,\n    4376,\n    4614,\n    4623,\n    4596,\n    4864,\n    5016,\n    5074,\n    5357,\n    5301,\n    5138,\n    5094,\n    5075,\n    5258,\n    5417,\n    5583,\n    5725,\n    5936,\n    6066,\n    6096,\n    6171,\n    6110,\n    6104,\n    6208,\n    6344,\n    6491,\n    6589,\n    6571,\n    6559,\n    6727,\n    6886,\n    6946,\n    7367,\n    7735,\n    8025,\n    8307,\n    8488,\n    8738,\n    8641,\n    9137,\n    9508,\n    9671,\n    9776\n  ]\n};\n\nexport const GlobalTemperatureData = {\n  title: \"Average global temperature\",\n  defaultColors: \"interpolateTurbo\",\n  description:\n    \"Average global land temperatures, 1880-2019. \" +\n    \"Values in centigrade difference compared with base period 1901-2000.\",\n  source: \"https://www.ncdc.noaa.gov/cag/\",\n  data: [\n    -0.31,\n    -0.37,\n    -0.47,\n    -0.37,\n    -0.72,\n    -0.5,\n    -0.21,\n    -0.35,\n    -0.19,\n    -0.19,\n    -0.16,\n    -0.35,\n    -0.34,\n    -0.17,\n    -0.39,\n    -0.31,\n    -0.14,\n    0.07,\n    -0.26,\n    -0.24,\n    -0.14,\n    0.07,\n    -0.21,\n    -0.42,\n    -0.48,\n    -0.18,\n    -0.15,\n    -0.44,\n    -0.18,\n    -0.37,\n    -0.03,\n    -0.4,\n    -0.53,\n    -0.2,\n    -0.23,\n    -0.01,\n    -0.36,\n    -0.26,\n    -0.42,\n    -0.12,\n    -0.17,\n    -0.04,\n    -0.15,\n    -0.4,\n    -0.13,\n    -0.33,\n    -0.3,\n    -0.07,\n    -0.15,\n    -0.48,\n    0.01,\n    0.17,\n    -0.01,\n    -0.15,\n    -0.05,\n    -0.06,\n    0.22,\n    -0.03,\n    0.04,\n    0.05,\n    0.15,\n    0.24,\n    -0.1,\n    -0.01,\n    0.14,\n    -0.12,\n    -0.03,\n    -0.08,\n    0.03,\n    -0.17,\n    -0.3,\n    0.03,\n    0.13,\n    0.05,\n    -0.12,\n    -0.2,\n    -0.22,\n    -0.17,\n    0.07,\n    0.1,\n    -0.09,\n    0.01,\n    -0.02,\n    0.18,\n    -0.16,\n    -0.16,\n    0.17,\n    -0.11,\n    -0.15,\n    0.12,\n    0.1,\n    -0.07,\n    -0.05,\n    0.23,\n    0.06,\n    0.09,\n    -0.22,\n    0.22,\n    -0.03,\n    0.1,\n    0.22,\n    0.21,\n    0.2,\n    0.35,\n    0.06,\n    -0.11,\n    0.06,\n    0.55,\n    0.53,\n    0.29,\n    0.28,\n    0.47,\n    -0.2,\n    0.28,\n    0.33,\n    0.53,\n    0.44,\n    0.49,\n    1.14,\n    0.68,\n    0.54,\n    0.83,\n    0.99,\n    0.75,\n    0.41,\n    0.95,\n    0.91,\n    0.83,\n    0.87,\n    0.74,\n    1.15,\n    1.04,\n    1.04,\n    0.82,\n    0.79,\n    1.05,\n    1.17,\n    1.22,\n    1.19,\n    1.18\n  ]\n};\n","import styled from \"styled-components\";\nimport { size } from \"../utils/styles\";\n\nexport const Header = styled.h1`\n  font-size: 1.4rem;\n  margin: 1rem 0;\n  color: ${props => props.color || \"#000000\"};\n\n  @media ${size.large} {\n    font-size: 2rem;\n  }\n`;\n\nexport const SubHeader = styled.h2`\n  display: block;\n  font-size: 1rem;\n  opacity: 0.7;\n`;\n\nexport const Description = styled.p``;\n\nexport const SourceLink = styled.a`\n  font-size: 0.8rem;\n`;\n\nexport const Footer = styled.small`\n  display: none;\n  position: fixed;\n  bottom: 20px;\n\n  @media ${size.large} {\n    display: block;\n  }\n`;\n\nexport const FixedSection = styled.section`\n  position: fixed;\n  padding: 1.5rem;\n  box-sizing: border-box;\n  width: 100vw;\n  height: 60vh;\n  bottom: 0;\n`;\n","import * as d3 from \"d3-scale-chromatic\";\n\nconst interpolators = {\n  interpolateBlues: d3.interpolateBlues,\n  interpolateBrBG: d3.interpolateBrBG,\n  interpolateBuGn: d3.interpolateBuGn,\n  interpolateBuPu: d3.interpolateBuPu,\n  interpolateCividis: d3.interpolateCividis,\n  interpolateCool: d3.interpolateCool,\n  interpolateCubehelixDefault: d3.interpolateCubehelixDefault,\n  interpolateGnBu: d3.interpolateGnBu,\n  interpolateGreens: d3.interpolateGreens,\n  interpolateGreys: d3.interpolateGreys,\n  interpolateInferno: d3.interpolateInferno,\n  interpolateMagma: d3.interpolateMagma,\n  interpolateOrRd: d3.interpolateOrRd,\n  interpolateOranges: d3.interpolateOranges,\n  interpolatePRGn: d3.interpolatePRGn,\n  interpolatePiYG: d3.interpolatePiYG,\n  interpolatePlasma: d3.interpolatePlasma,\n  interpolatePuBu: d3.interpolatePuBu,\n  interpolatePuBuGn: d3.interpolatePuBuGn,\n  interpolatePuOr: d3.interpolatePuOr,\n  interpolatePuRd: d3.interpolatePuRd,\n  interpolatePurples: d3.interpolatePurples,\n  interpolateRainbow: d3.interpolateRainbow,\n  interpolateRdBu: d3.interpolateRdBu,\n  interpolateRdGy: d3.interpolateRdGy,\n  interpolateRdPu: d3.interpolateRdPu,\n  interpolateRdYlBu: d3.interpolateRdYlBu,\n  interpolateRdYlGn: d3.interpolateRdYlGn,\n  interpolateReds: d3.interpolateReds,\n  interpolateSinebow: d3.interpolateSinebow,\n  interpolateSpectral: d3.interpolateSpectral,\n  interpolateTurbo: d3.interpolateTurbo,\n  interpolateViridis: d3.interpolateViridis,\n  interpolateWarm: d3.interpolateWarm,\n  interpolateYlGn: d3.interpolateYlGn,\n  interpolateYlGnBu: d3.interpolateYlGnBu,\n  interpolateYlOrBr: d3.interpolateYlOrBr,\n  interpolateYlOrRd: d3.interpolateYlOrRd\n};\nconst getInterPolator = name => {\n  const names = Object.keys(interpolators);\n  if (!name || !names.includes(name)) {\n    return null;\n  }\n  return { name, func: interpolators[name] };\n};\nconst getRandomInterPolator = () => {\n  const names = Object.keys(interpolators);\n  const name = names[Math.floor(Math.random() * names.length)];\n  return { name, func: interpolators[name] };\n};\n\nexport const getColorInterpolator = ({ interpolatorName } = {}) => {\n  const interPolator =\n    getInterPolator(interpolatorName) || getRandomInterPolator();\n  return {\n    name: interPolator.name,\n    func: interPolator.func,\n    themeColor: interPolator.func(0.8)\n  };\n};\n\nexport const getNormalizer = ({ data }) => {\n  const maxValue = Math.max(...data);\n  const minValue = Math.min(...data);\n  return value => {\n    const constrainedValue = Math.min(Math.max(value, minValue), maxValue);\n    return (constrainedValue - minValue) / (maxValue - minValue);\n  };\n};\n","import styled from \"styled-components\";\nimport { size } from \"../utils/styles\";\n\nexport const Button = styled.button`\n  font-size: 1rem;\n  border: none;\n  background-color: transparent;\n  padding: 0.8rem;\n  margin: 0;\n  text-align: left;\n  display: inline-flex;\n  align-items: center;\n  justify-content: flex-end;\n  width: 100%;\n`;\n\nexport const ButtonLink = styled.a`\n  text-decoration: none;\n  color: black;\n  font-size: 1rem;\n  border: none;\n  background-color: transparent;\n  padding: 0.8rem;\n  margin: 0;\n  text-align: left;\n  display: inline-flex;\n  align-items: center;\n  justify-content: flex-end;\n  width: 100%;\n`;\n\nexport const ButtonLabel = styled.span`\n  font-size: 0.8rem;\n\n  @media ${size.large} {\n    font-size: 1.1rem;\n  }\n`;\n\nexport const ButtonIcon = styled.span`\n  margin-left: 0.5em;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { size } from \"../utils/styles\";\n\nconst OuterWrapper = styled.aside`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  width: 100vw;\n  box-sizing: border-box;\n  color: white;\n  text-align: right;\n\n  @media ${size.large} {\n    min-width: 200px;\n    width: auto;\n  }\n`;\n\nexport const Menu = ({ children }) => (\n  <OuterWrapper>\n    {children}\n  </OuterWrapper>\n);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst InlineSVG = styled.svg.attrs(() => ({\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"1.8em\",\n  height: \"1.8em\",\n  viewBox: \"0 0 12 12\"\n}))``;\n\nconst SVGCircle = styled.circle.attrs(() => ({ cx: \"6\", cy: \"6\", r: \"5.5\" }))`\n  stroke: ${props => props.color};\n  stroke-linecap: round;\n  fill: none;\n\n  ${InlineSVG}:active & {\n    fill: ${props => props.color};\n  }\n`;\n\nexport const Spinner = ({ color = \"rgb(16, 88, 160)\" }) => (\n  <InlineSVG>\n    <SVGCircle color={color}></SVGCircle>\n  </InlineSVG>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\n\nimport { FullScreen } from \"./Components/Fullscreen\";\nimport { Lines } from \"./Components/Lines\";\nimport {\n  CO2emissionData,\n  GlobalTemperatureData,\n  LinearData,\n  RandomData\n} from \"./data\";\nimport {\n  Description,\n  Footer,\n  Header,\n  FixedSection,\n  SubHeader,\n  SourceLink\n} from \"./Components/FixedSection\";\nimport { getColorInterpolator, getNormalizer } from \"./utils/palette\";\nimport {\n  Button,\n  ButtonIcon,\n  ButtonLabel,\n  ButtonLink\n} from \"./Components/Button\";\nimport { Menu } from \"./Components/Menu\";\nimport { Spinner } from \"./Components/Icon\";\n\nexport const App = () => {\n  const dataSources = [\n    GlobalTemperatureData,\n    CO2emissionData,\n    LinearData,\n    RandomData\n  ];\n  const [dataSourceIndex, setDataSourceIndex] = useState(0);\n  const nextDataSource = () => {\n    setDataSourceIndex(dataSourceIndex + 1);\n    setSelectedValue(null);\n  };\n  const dataSource = dataSources[dataSourceIndex % dataSources.length];\n  const { title, description, data, defaultColors, source } = dataSource;\n  const [selectedValue, setSelectedValue] = useState(null);\n\n  const [interpolator, setInterpolator] = useState(() =>\n    getColorInterpolator({ interpolatorName: defaultColors })\n  );\n  const nextColorInterpolator = () => setInterpolator(getColorInterpolator());\n  const normalize = getNormalizer({ data });\n  const getColor = value => interpolator.func(normalize(value));\n\n  return (\n    <FullScreen>\n      <FixedSection>\n        <SubHeader>\n          <a href=\"https://www.npmjs.com/package/d3-scale-chromatic\">\n            d3-scale-chromatic\n          </a>\n        </SubHeader>\n        <Header>{title}</Header>\n        <Description>\n          {description}{' '}\n          {!!source && <SourceLink href={source}>[source]</SourceLink>}\n        </Description>\n\n        <Footer>\n          Click the buttons in the lower right corner to change data or color\n          palette.\n        </Footer>\n        {selectedValue !== null && (\n          <SubHeader>Selected value: {selectedValue}</SubHeader>\n        )}\n\n        <Menu>\n          <ButtonLink href=\"https://github.com/tomfa/color-graph\">\n            <ButtonLabel>Code</ButtonLabel>\n            <ButtonIcon>\n              <img\n                width=\"27\"\n                height=\"27\"\n                alt=\"Github icon\"\n                src=\"./github.png\"\n              />\n            </ButtonIcon>\n          </ButtonLink>\n          <Button onClick={nextDataSource}>\n            <ButtonLabel>{dataSource.title}</ButtonLabel>\n            <ButtonIcon>\n              <Spinner color={\"black\"} />\n            </ButtonIcon>\n          </Button>\n          <Button onClick={nextColorInterpolator}>\n            <ButtonLabel>d3.{interpolator.name}</ButtonLabel>\n            <ButtonIcon>\n              <Spinner color={interpolator.themeColor} />\n            </ButtonIcon>\n          </Button>\n        </Menu>\n      </FixedSection>\n\n      <Lines\n        data={data}\n        getColor={getColor}\n        onLineClick={value => {\n          setSelectedValue(value);\n        }}\n      />\n    </FullScreen>\n  );\n};\n"],"sourceRoot":""}