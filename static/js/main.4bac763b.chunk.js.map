{"version":3,"sources":["Components/Fullscreen.js","utils/styles.js","utils/palette.js","Components/Lines.js","data/index.js","serviceWorker.js","index.js","App.js"],"names":["FullscreenWrapper","styled","div","InnerFullScreen","FullScreen","children","interpolators","d3","getInterPolator","data","colorFunction","interpolator","Math","floor","random","length","maxValue","max","minValue","min","console","log","value","normalizedValue","normalize","SVGLine","line","props","height","Lines","isClient","window","getSize","width","innerWidth","undefined","innerHeight","useState","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","getColor","setInterpolator","svgWidth","svgHeight","viewBox","xmlns","map","i","key","x1","x2","y1","y2","stroke","strokeWidth","onClick","randomData","Array","fill","_","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4bac763b.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport { size } from '../utils/styles';\n\nconst FullscreenWrapper = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n\n  @media ${size.large} {\n    overflow: hidden;\n  }\n  background-color: transparent;\n`;\n\nconst InnerFullScreen = styled.div`\n  vertical-align: middle;\n  width: 100%;\n`;\n\nexport const FullScreen = ({ children }) => (\n  <FullscreenWrapper>\n    <InnerFullScreen>{children}</InnerFullScreen>\n  </FullscreenWrapper>\n);\n","import { useState, useEffect } from 'react';\n\nexport const size = {\n  medium: `(min-width: 480px)`,\n  large: `(min-width: 768px)`,\n};\n\nexport const useWindowSize = () => {\n  const isClient = typeof window === 'object';\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}\n","import React, { useState } from \"react\";\nimport * as d3 from \"d3-scale-chromatic\";\n\nconst colorPalettes = [\n  [\"#d77fa1\", \"#e6b2c6\", \"#fef6fb\", \"#d6e5fa\"],\n  [\"#ffa259\", \"#fe6845\", \"#fa4252\", \"#91bd3a\"],\n  [\"#561f55\", \"#8b2f97\", \"#cf56a1\", \"#fcb2bf\"],\n  [\"#f8b195\", \"#f67280\", \"#c06c84\", \"#6c5b7b\"],\n  [\"#f8b195\", \"#f67280\", \"#4d80e4\", \"#6c5b7b\"],\n  [\"#beebe9\", \"#beebe9\", \"#fffdf9\", \"#ffe3ed\"],\n  [\"#9be3de\", \"#beebe9\", \"#fffdf9\", \"#ffe3ed\"],\n  [\"#eafbea\", \"#6f9a8d\", \"#1f6650\", \"#ea5e5e\"],\n  [\"#51eaea\", \"#ffdbc5\", \"#ff9d76\", \"#ef4339\"],\n  [\"#621055\", \"#b52b65\", \"#ed6663\", \"#ffa372\"]\n];\n\nconst getRandomPalette = () => {\n  return colorPalettes[Math.floor(Math.random() * colorPalettes.length)];\n};\n\nexport const usePalette = () => {\n  const [palette, setPalette] = useState(getRandomPalette());\n  const setRandomPalette = () => setPalette(getRandomPalette());\n\n  return [palette, setRandomPalette];\n};\n\nconst interpolators = [\n  d3.interpolateBlues,\n  d3.interpolateBrBG,\n  d3.interpolateBuGn,\n  d3.interpolateBuPu,\n  d3.interpolateCividis,\n  d3.interpolateCool,\n  d3.interpolateCubehelixDefault,\n  d3.interpolateGnBu,\n  d3.interpolateGreens,\n  d3.interpolateGreys,\n  d3.interpolateInferno,\n  d3.interpolateMagma,\n  d3.interpolateOrRd,\n  d3.interpolateOranges,\n  d3.interpolatePRGn,\n  d3.interpolatePiYG,\n  d3.interpolatePlasma,\n  d3.interpolatePuBu,\n  d3.interpolatePuBuGn,\n  d3.interpolatePuOr,\n  d3.interpolatePuRd,\n  d3.interpolatePurples,\n  d3.interpolateRainbow,\n  d3.interpolateRdBu,\n  d3.interpolateRdGy,\n  d3.interpolateRdPu,\n  d3.interpolateRdYlBu,\n  d3.interpolateRdYlGn,\n  d3.interpolateReds,\n  d3.interpolateSinebow,\n  d3.interpolateSpectral,\n  d3.interpolateTurbo,\n  d3.interpolateViridis,\n  d3.interpolateWarm,\n  d3.interpolateYlGn,\n  d3.interpolateYlGnBu,\n  d3.interpolateYlOrBr,\n  d3.interpolateYlOrRd\n];\nconst getRandomInterPolator = () => {\n  return interpolators[Math.floor(Math.random() * interpolators.length)];\n};\nconst normalize = ({ minValue, maxValue, value }) => {\n  const constrainedValue = Math.min(Math.max(value, minValue), maxValue);\n  return (constrainedValue - minValue) / (maxValue - minValue);\n};\nexport const getInterPolator = ({ data, interpolator }) => {\n  const colorFunction = interpolator || getRandomInterPolator();\n  const maxValue = Math.max(...data);\n  const minValue = Math.min(...data);\n  console.log(minValue, maxValue)\n  return value => {\n    const normalizedValue = normalize({ minValue, maxValue, value });\n    console.log(normalizedValue)\n    return colorFunction(normalizedValue);\n  }\n};\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport * as d3 from \"d3-scale-chromatic\";\n\nimport { getInterPolator } from \"../utils/palette\";\nimport { useWindowSize } from \"../utils/styles\";\n\nconst SVGLine = styled.line`\n  transition: stroke-dashoffset 5s;\n  transition-timing-function: linear;\n  cursor: pointer;\n  stroke-dasharray: ${props => props.height};\n\n  stroke-dashoffset: -${props => props.height / 2};\n\n  &:hover {\n    stroke-dashoffset: 0;\n    transition-duration: 0.5s;\n  }\n\n  user-select: none;\n  -webkit-tap-highlight-color: transparent;\n`;\n\nexport const Lines = ({ data }) => {\n  const { width, height } = useWindowSize();\n  const [getColor, setInterpolator] = useState(() =>\n    getInterPolator({ data, interpolator: d3.interpolateBlues })\n  );\n  const count = data.length;\n  const svgWidth = count * 2;\n  const svgHeight = svgWidth * (height / width);\n\n  return (\n    <svg\n      viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n      width={width}\n      height={height}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      {data.map((value, i) => (\n        <SVGLine\n          height={svgHeight}\n          key={i}\n          x1={2 * i + 1}\n          x2={2 * i + 1}\n          y1={0}\n          y2={svgHeight}\n          stroke={getColor(value)}\n          strokeWidth=\"2\"\n          onClick={() => setInterpolator(() => getInterPolator({ data }))}\n        />\n      ))}\n    </svg>\n  );\n};\n","export const randomData = Array(40).fill(null).map((_, i) => i);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\n\nimport { FullScreen } from \"./Components/Fullscreen\";\nimport { Lines } from \"./Components/Lines\";\nimport { randomData } from \"./data\";\n\nexport const App = () => (\n  <FullScreen>\n    <Lines data={randomData} />\n  </FullScreen>\n);\n"],"sourceRoot":""}